import{_ as s,C as n,c as i,o as r,ag as a,j as e,a as l,G as o}from"./chunks/framework.CkHWihve.js";const C=JSON.parse('{"title":"配置","description":"","frontmatter":{},"headers":[],"relativePath":"zh-hans/manage/configuration.md","filePath":"zh-hans/manage/configuration.md","lastUpdated":1755823056000}'),c={name:"zh-hans/manage/configuration.md"},p={tabindex:"0"},f={style:{"text-align":"left"}},u={tabindex:"0"},g={style:{"text-align":"left"}},h={tabindex:"0"},y={style:{"text-align":"left"}},b={tabindex:"0"},_={style:{"text-align":"left"}};function x(m,t,v,k,A,S){const d=n("Badge");return r(),i("div",null,[t[28]||(t[28]=a(`<h1 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h1><p><code>asdf</code> 配置既包括可共享的 <code>.tool-versions</code> 文件，也包括用户特定的自定义 <code>.asdfrc</code> 和环境变量。</p><h2 id="tool-versions" tabindex="-1"><code>.tool-versions</code> <a class="header-anchor" href="#tool-versions" aria-label="Permalink to &quot;\`.tool-versions\`&quot;">​</a></h2><p>无论何时 <code>.tool-versions</code> 出现在目录中，它所声明的工具版本将会被用于该目录和任意子目录。</p><p><code>.tool-versions</code> 文件示例如下所示：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ruby 2.5.3</span></span>
<span class="line"><span>nodejs 10.15.0</span></span></code></pre></div><p>你也可以包含注释在里面：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ruby 2.5.3 # 这是一个注释</span></span>
<span class="line"><span># 这是另一个注释</span></span>
<span class="line"><span>nodejs 10.15.0</span></span></code></pre></div><p>版本号可以有如下格式：</p><ul><li><code>10.15.0</code> - 实际的版本号。支持下载二进制文件的插件将会下载二进制文件。</li><li><code>ref:v1.0.2-a</code> 或者 <code>ref:39cb398vb39</code> - 指定标签/提交/分支从 github 下载并编译。</li><li><code>path:~/src/elixir</code> - 要使用的工具的自定义编译版本的路径。这种方式供语言开发者等使用。</li><li><code>system</code> - 此关键字会导致 asdf 传递系统上未由 asdf 管理的工具版本。</li></ul><div class="tip custom-block"><p class="custom-block-title">提示</p><p>多版本可以通过空格将它们分隔开来。比如，使用 Python <code>3.7.2</code> 回退到 Python <code>2.7.15</code> 最后回退到 <code>system</code> Python，可以将以下行的内容添加到 <code>.tool-versions</code> 文件中。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python 3.7.2 2.7.15 system</span></span></code></pre></div></div><p>为了安装 <code>.tool-versions</code> 文件中定义的所有工具，在包含 <code>.tool-versions</code> 文件的目录中不带其他参数执行 <code>asdf install</code> 命令。</p><p>为了安装 <code>.tool-versions</code> 文件中定义的某个工具，在包含 <code>.tool-versions</code> 文件的目录中运行 <code>asdf install &lt;name&gt;</code> 命令。这个工具将会安装 <code>.tool-versions</code> 文件所指定的版本。</p><p>可以直接编辑这个文件或者使用 <code>asdf local</code> （或者 <code>asdf global</code>）来更新工具版本。</p><h2 id="asdfrc" tabindex="-1"><code>.asdfrc</code> <a class="header-anchor" href="#asdfrc" aria-label="Permalink to &quot;\`.asdfrc\`&quot;">​</a></h2><p><code>.asdfrc</code> 文件定义了用户机器的特定配置。</p><p><code>$HOME/.asdfrc</code> 是 asdf 使用的默认位置。这可以通过 <a href="#asdf-config-file">环境变量 <code>ASDF_CONFIG_FILE</code></a> 进行配置。</p><p>以下文件展示了所需的格式及其默认值：</p><div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>legacy_version_file = no</span></span>
<span class="line"><span>use_release_candidates = no</span></span>
<span class="line"><span>always_keep_download = no</span></span>
<span class="line"><span>plugin_repository_last_check_duration = 60</span></span>
<span class="line"><span>disable_plugin_short_name_repository = no</span></span>
<span class="line"><span>concurrency = auto</span></span></code></pre></div><h3 id="legacy-version-file" tabindex="-1"><code>legacy_version_file</code> <a class="header-anchor" href="#legacy-version-file" aria-label="Permalink to &quot;\`legacy_version_file\`&quot;">​</a></h3><p>插件 <strong>支持</strong> 读取其他版本管理器使用的版本文件，比如，Ruby 的 <code>rbenv</code> 的 <code>.ruby-version</code> 文件。</p>`,21)),e("table",p,[t[4]||(t[4]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"选项"),e("th",{style:{"text-align":"left"}},"描述")])],-1)),e("tbody",null,[e("tr",null,[e("td",f,[t[0]||(t[0]=e("code",null,"no",-1)),t[1]||(t[1]=l()),o(d,{type:"tip",text:"默认",vertical:"middle"})]),t[2]||(t[2]=e("td",{style:{"text-align":"left"}},[l("从 "),e("code",null,".tool-versions"),l(" 文件读取版本")],-1))]),t[3]||(t[3]=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"yes")]),e("td",{style:{"text-align":"left"}},[l("如果可行的话，从传统版本文件读取版本（"),e("code",null,".ruby-versions"),l("）")])],-1))])]),t[29]||(t[29]=e("h3",{id:"always-keep-download",tabindex:"-1"},[e("code",null,"always_keep_download"),l(),e("a",{class:"header-anchor",href:"#always-keep-download","aria-label":'Permalink to "`always_keep_download`"'},"​")],-1)),t[30]||(t[30]=e("p",null,[l("配置 "),e("code",null,"asdf install"),l(" 命令以保留或删除下载的源代码或二进制文件。")],-1)),e("table",u,[t[9]||(t[9]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"选项"),e("th",{style:{"text-align":"left"}},"描述")])],-1)),e("tbody",null,[e("tr",null,[e("td",g,[t[5]||(t[5]=e("code",null,"no",-1)),t[6]||(t[6]=l()),o(d,{type:"tip",text:"默认",vertical:"middle"})]),t[7]||(t[7]=e("td",{style:{"text-align":"left"}},"在成功安装后删除源代码或二进制文件",-1))]),t[8]||(t[8]=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"yes")]),e("td",{style:{"text-align":"left"}},"在安装后保留源代码或二进制文件")],-1))])]),t[31]||(t[31]=e("h3",{id:"plugin-repository-last-check-duration",tabindex:"-1"},[e("code",null,"plugin_repository_last_check_duration"),l(),e("a",{class:"header-anchor",href:"#plugin-repository-last-check-duration","aria-label":'Permalink to "`plugin_repository_last_check_duration`"'},"​")],-1)),t[32]||(t[32]=e("p",null,[l("配置自上次 asdf 插件存储库同步到下一次存储库同步的持续时间。命令 "),e("code",null,"asdf plugin add <name>"),l(" 或者 "),e("code",null,"asdf plugin list all"),l(" 将会触发持续时间的检查，如果持续时间已过，则进行同步。")],-1)),e("table",h,[t[22]||(t[22]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"选项"),e("th",{style:{"text-align":"left"}},"描述")])],-1)),e("tbody",null,[e("tr",null,[e("td",y,[t[10]||(t[10]=l("从 ")),t[11]||(t[11]=e("code",null,"1",-1)),t[12]||(t[12]=l(" 到 ")),t[13]||(t[13]=e("code",null,"999999999",-1)),t[14]||(t[14]=l(" 的数字 ")),t[15]||(t[15]=e("br",null,null,-1)),t[16]||(t[16]=l()),o(d,{type:"tip",text:"默认",vertical:"middle"}),t[17]||(t[17]=l(" 为 ")),t[18]||(t[18]=e("code",null,"60",-1))]),t[19]||(t[19]=e("td",{style:{"text-align":"left"}},"如果已过自上次同步的持续时间，触发器事件发生时同步",-1))]),t[20]||(t[20]=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"0")]),e("td",{style:{"text-align":"left"}},"每个触发器事件发生时同步")],-1)),t[21]||(t[21]=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"never")]),e("td",{style:{"text-align":"left"}},"从不同步")],-1))])]),t[33]||(t[33]=a('<p>同步事件在执行以下命令时发生：</p><ul><li><code>asdf plugin add &lt;name&gt;</code></li><li><code>asdf plugin list all</code></li></ul><p><code>asdf plugin add &lt;name&gt; &lt;git-url&gt;</code> 不会触发插件同步。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>将值设置为 <code>never</code> 并不会阻止插件仓库的初始同步，如需实现此行为，请查看 <code>disable_plugin_short_name_repository</code> 了解更多。</p></div><h3 id="disable-plugin-short-name-repository" tabindex="-1"><code>disable_plugin_short_name_repository</code> <a class="header-anchor" href="#disable-plugin-short-name-repository" aria-label="Permalink to &quot;`disable_plugin_short_name_repository`&quot;">​</a></h3><p>禁用 asdf 插件的缩写仓库同步功能。如果缩写仓库被禁用，同步事件将提前退出。</p>',6)),e("table",b,[t[27]||(t[27]=e("thead",null,[e("tr",null,[e("th",{style:{"text-align":"left"}},"选项"),e("th",{style:{"text-align":"left"}},"描述")])],-1)),e("tbody",null,[e("tr",null,[e("td",_,[t[23]||(t[23]=e("code",null,"no",-1)),t[24]||(t[24]=l()),o(d,{type:"tip",text:"default",vertical:"middle"})]),t[25]||(t[25]=e("td",{style:{"text-align":"left"}},"在同步事件发生时克隆或更新 asdf 插件仓库",-1))]),t[26]||(t[26]=e("tr",null,[e("td",{style:{"text-align":"left"}},[e("code",null,"yes")]),e("td",{style:{"text-align":"left"}},"禁用插件缩写仓库")],-1))])]),t[34]||(t[34]=a('<p>同步事件在执行以下命令时发生：</p><ul><li><code>asdf plugin add &lt;name&gt;</code></li><li><code>asdf plugin list all</code></li></ul><p><code>asdf plugin add &lt;name&gt; &lt;git-url&gt;</code> 不会触发插件同步。</p><div class="warning custom-block"><p class="custom-block-title">注意</p><p>禁用插件缩写仓库不会删除该仓库，如果它已经同步过。使用 <code>rm --recursive --trash $ASDF_DATA_DIR/repository</code> 才可以删除插件仓库。</p><p>禁用插件缩写仓库不会删除从该源之前安装的插件。可使用 <code>asdf plugin remove &lt;name&gt;</code> 命令删除插件。删除插件将移除该管理工具所有已安装版本。</p></div><h3 id="concurrency" tabindex="-1"><code>concurrency</code> <a class="header-anchor" href="#concurrency" aria-label="Permalink to &quot;`concurrency`&quot;">​</a></h3><p>编译时使用的默认核心数。</p><table tabindex="0"><thead><tr><th style="text-align:left;">选项</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">integer</td><td style="text-align:left;">编译源代码时使用的核心数 code</td></tr><tr><td style="text-align:left;"><code>auto</code></td><td style="text-align:left;">使用 <code>nproc</code> 命令计算核心数量，然后使用 <code>sysctl hw.ncpu</code> 命令，接着查看 <code>/proc/cpuinfo</code> 文件，如果无法获取则默认使用 <code>1</code>。</td></tr></tbody></table><p>注意：如果设置了环境变量 <code>ASDF_CONCURRENCY</code>，则该变量具有优先级。</p><h3 id="插件钩子" tabindex="-1">插件钩子 <a class="header-anchor" href="#插件钩子" aria-label="Permalink to &quot;插件钩子&quot;">​</a></h3><p>可以执行自定义代码：</p><ul><li>在插件安装、重新加载、更新或卸载之前或之后</li><li>在执行插件命令之前或之后</li></ul><p>比如，如果安装了一个名为 <code>foo</code> 的插件并提供了 <code>bar</code> 可执行文件，则可以使用以下钩子在执行插件命令之前先执行自定义代码：</p><div class="language-text vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pre_foo_bar = echo Executing with args: $@</span></span></code></pre></div><p>支持以下模式：</p><ul><li><code>pre_&lt;plugin_name&gt;_&lt;command&gt;</code></li><li><code>pre_asdf_download_&lt;plugin_name&gt;</code></li><li><code>{pre,post}_asdf_{install,reshim,uninstall}_&lt;plugin_name&gt;</code><ul><li><code>$1</code>: 完整版本</li></ul></li><li><code>{pre,post}_asdf_plugin_{add,update,remove,reshim}</code><ul><li><code>$1</code>: 插件名称</li></ul></li><li><code>{pre,post}_asdf_plugin_{add,update,remove}_&lt;plugin_name&gt;</code></li></ul><p>请查看 <a href="./../plugins/create.html">创建插件</a> 了解在哪些命令执行之前或之后会运行哪些命令钩子。</p><h2 id="环境变量" tabindex="-1">环境变量 <a class="header-anchor" href="#环境变量" aria-label="Permalink to &quot;环境变量&quot;">​</a></h2><p>设置环境变量会因系统和 Shell 的不同而有所差异。默认位置取决于安装位置和方法（Git 克隆、Homebrew、AUR）。</p><p>环境变量通常应在加载 <code>asdf.sh</code>/<code>asdf.fish</code> 等文件之前设置。对于 Elvish，应在 <code>use asdf</code> 之前设置。</p><p>以下内容描述了在 Bash Shell 中的使用方法。</p><h3 id="asdf-config-file" tabindex="-1"><code>ASDF_CONFIG_FILE</code> <a class="header-anchor" href="#asdf-config-file" aria-label="Permalink to &quot;`ASDF_CONFIG_FILE`&quot;">​</a></h3><p><code>.asdfrc</code> 配置文件的路径。可以设置为任何位置。必须是绝对路径。</p><ul><li>如果未设置：将使用 <code>$HOME/.asdfrc</code>。</li><li>使用方法：<code>export ASDF_CONFIG_FILE=/home/john_doe/.config/asdf/.asdfrc</code></li></ul><h3 id="asdf-tool-versions-filename" tabindex="-1"><code>ASDF_TOOL_VERSIONS_FILENAME</code> <a class="header-anchor" href="#asdf-tool-versions-filename" aria-label="Permalink to &quot;`ASDF_TOOL_VERSIONS_FILENAME`&quot;">​</a></h3><p>用于存储工具名称和版本的文件名。可以是任何合法的文件名。通常不建议设置这个值，除非你希望忽略 <code>.tool-versions</code> 文件。</p><ul><li>如果未设置：将使用 <code>.tool-versions</code>。</li><li>使用方法：<code>export ASDF_TOOL_VERSIONS_FILENAME=tool_versions</code></li></ul><h3 id="asdf-dir" tabindex="-1"><code>ASDF_DIR</code> <a class="header-anchor" href="#asdf-dir" aria-label="Permalink to &quot;`ASDF_DIR`&quot;">​</a></h3><p><code>asdf</code> 核心脚本的位置。可以设置为任何位置，必须是绝对路径。</p><ul><li>如果未设置，将使用 <code>bin/asdf</code> 可执行文件的父目录。</li><li>使用方法：<code>export ASDF_DIR=/home/john_doe/.config/asdf</code></li></ul><h3 id="asdf-data-dir" tabindex="-1"><code>ASDF_DATA_DIR</code> <a class="header-anchor" href="#asdf-data-dir" aria-label="Permalink to &quot;`ASDF_DATA_DIR`&quot;">​</a></h3><p><code>asdf</code> 安装插件、垫片和工具版本的位置，可以设置为任何位置，必须是绝对路径。</p><ul><li>如果未设置：将使用 <code>$HOME/.asdf</code> 如果存在，或者 <code>ASDF_DIR</code> 的值。</li><li>使用方法：<code>export ASDF_DATA_DIR=/home/john_doe/.asdf</code></li></ul><h3 id="asdf-concurrency" tabindex="-1"><code>ASDF_CONCURRENCY</code> <a class="header-anchor" href="#asdf-concurrency" aria-label="Permalink to &quot;`ASDF_CONCURRENCY`&quot;">​</a></h3><p>编译源代码时使用的 CPU 核心数。如果设置了这个值，它将优先于 asdf 配置中的 <code>concurrency</code> 值。</p><ul><li>如果未设置：将使用 asdf 配置中的 <code>concurrency</code> 值。</li><li>使用方法：<code>export ASDF_CONCURRENCY=32</code></li></ul><h2 id="全配置样例" tabindex="-1">全配置样例 <a class="header-anchor" href="#全配置样例" aria-label="Permalink to &quot;全配置样例&quot;">​</a></h2><p>按照以下简单的 asdf 配置：</p><ul><li>使用 Bash Shell</li><li>安装位置为 <code>$HOME/.asdf</code></li><li>通过 Git 安装</li><li><strong>未</strong>设置任何环境变量</li><li><strong>没有</strong>自定义的 <code>.asdfrc</code> 文件</li></ul><p>将会产生以下结果：</p><table tabindex="0"><thead><tr><th style="text-align:left;">配置</th><th style="text-align:left;">值</th><th style="text-align:left;">如何计算</th></tr></thead><tbody><tr><td style="text-align:left;">配置文件位置</td><td style="text-align:left;"><code>$HOME/.asdfrc</code></td><td style="text-align:left;"><code>ASDF_CONFIG_FILE</code> 是空的，所以请使用 <code>$HOME/.asdfrc</code></td></tr><tr><td style="text-align:left;">默认工具版本声明文件名</td><td style="text-align:left;"><code>.tool-versions</code></td><td style="text-align:left;"><code>ASDF_TOOL_VERSIONS_FILENAME</code> 是空的，所以请使用 <code>.tool-versions</code></td></tr><tr><td style="text-align:left;">asdf 目录</td><td style="text-align:left;"><code>$HOME/.asdf</code></td><td style="text-align:left;"><code>ASDF_DIR</code> 是空的，所以请使用 <code>bin/asdf</code> 的父目录</td></tr><tr><td style="text-align:left;">asdf 数据目录</td><td style="text-align:left;"><code>$HOME/.asdf</code></td><td style="text-align:left;"><code>ASDF_DATA_DIR</code> 是空的，所以请使用 <code>$HOME/.asdf</code> 因为 <code>$HOME</code> 存在</td></tr><tr><td style="text-align:left;">concurrency</td><td style="text-align:left;"><code>auto</code></td><td style="text-align:left;"><code>ASDF_CONCURRENCY</code> 是空的，所以依赖于 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a> 的 <code>concurrency</code> 值</td></tr><tr><td style="text-align:left;">legacy_version_file</td><td style="text-align:left;"><code>no</code></td><td style="text-align:left;">没有自定义 <code>.asdfrc</code>，所以请使用 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a></td></tr><tr><td style="text-align:left;">use_release_candidates</td><td style="text-align:left;"><code>no</code></td><td style="text-align:left;">没有自定义 <code>.asdfrc</code>，所以请使用 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a></td></tr><tr><td style="text-align:left;">always_keep_download</td><td style="text-align:left;"><code>no</code></td><td style="text-align:left;">没有自定义 <code>.asdfrc</code>，所以请使用 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a></td></tr><tr><td style="text-align:left;">plugin_repository_last_check_duration</td><td style="text-align:left;"><code>60</code></td><td style="text-align:left;">没有自定义 <code>.asdfrc</code>，所以请使用 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a></td></tr><tr><td style="text-align:left;">disable_plugin_short_name_repository</td><td style="text-align:left;"><code>no</code></td><td style="text-align:left;">没有自定义 <code>.asdfrc</code>，所以请使用 <a href="https://github.com/asdf-vm/asdf/blob/master/defaults" target="_blank" rel="noreferrer">默认配置</a></td></tr></tbody></table>',40))])}const E=s(c,[["render",x]]);export{C as __pageData,E as default};
