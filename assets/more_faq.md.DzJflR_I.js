import{_ as t,c as s,o,ag as a}from"./chunks/framework.CkHWihve.js";const f=JSON.parse('{"title":"FAQ","description":"","frontmatter":{},"headers":[],"relativePath":"more/faq.md","filePath":"more/faq.md","lastUpdated":1748741734000}'),i={name:"more/faq.md"};function n(r,e,d,l,c,h){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="faq" tabindex="-1">FAQ <a class="header-anchor" href="#faq" aria-label="Permalink to &quot;FAQ&quot;">​</a></h1><p>Here are some common questions regarding <code>asdf</code>.</p><h2 id="wsl1-support" tabindex="-1">WSL1 support? <a class="header-anchor" href="#wsl1-support" aria-label="Permalink to &quot;WSL1 support?&quot;">​</a></h2><p>WSL1 (<a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux" target="_blank" rel="noreferrer">Windows Subsystem for Linux</a> 1) is not officially supported. Some aspects of <code>asdf</code> may not work properly. We do not intend to add official support for WSL1.</p><h2 id="wsl2-support" tabindex="-1">WSL2 support? <a class="header-anchor" href="#wsl2-support" aria-label="Permalink to &quot;WSL2 support?&quot;">​</a></h2><p>WSL2 (<a href="https://en.wikipedia.org/wiki/Windows_Subsystem_for_Linux#WSL_2" target="_blank" rel="noreferrer">Windows Subsystem for Linux</a> 2) should work using the setup &amp; dependency instructions for you chosen WSL distro.</p><p>Importantly, WSL2 is <em>only</em> expected to work properly when the current working directory is a Unix drive and not a bound Windows drive.</p><p>We intend to run out test suite on WSL2 when host runner support is available on GitHub Actions, currently this does not appear to be the case.</p><h2 id="newly-installed-executable-not-running" tabindex="-1">Newly installed executable not running? <a class="header-anchor" href="#newly-installed-executable-not-running" aria-label="Permalink to &quot;Newly installed executable not running?&quot;">​</a></h2><blockquote><p>I just <code>npm install -g yarn</code>, but cannot execute <code>yarn</code>. What gives?</p></blockquote><p><code>asdf</code> uses <a href="https://en.wikipedia.org/wiki/Shim_(computing)" target="_blank" rel="noreferrer">shims</a> to manage executables. Those installed by plugins have shims automatically created, whereas installing executables via an <code>asdf</code> managed tool will require you to notify <code>asdf</code> of the need to create shims. In this instance, to create a shim for <a href="https://yarnpkg.com/" target="_blank" rel="noreferrer">Yarn</a>. See the <a href="/manage/core.html#reshim"><code>asdf reshim</code> command docs</a>.</p><h2 id="shell-not-detecting-newly-installed-shims" tabindex="-1">Shell not detecting newly installed shims? <a class="header-anchor" href="#shell-not-detecting-newly-installed-shims" aria-label="Permalink to &quot;Shell not detecting newly installed shims?&quot;">​</a></h2><p>If <code>asdf reshim</code> is not resolving your issue, then it is most-likely due to the sourcing of <code>asdf.sh</code> or <code>asdf.fish</code> <em>not</em> being at the <strong>BOTTOM</strong> of your Shell config file (<code>.bash_profile</code>, <code>.zshrc</code>, <code>config.fish</code> etc). It needs to be sourced <strong>AFTER</strong> you have set your <code>$PATH</code> and <strong>AFTER</strong> you have sourced your framework (oh-my-zsh etc) if any.</p><h2 id="why-can-t-i-use-a-version-of-latest-in-the-tool-versions-file" tabindex="-1">Why can&#39;t I use a version of <code>latest</code> in the <code>.tool-versions</code> file? <a class="header-anchor" href="#why-can-t-i-use-a-version-of-latest-in-the-tool-versions-file" aria-label="Permalink to &quot;Why can&#39;t I use a version of `latest` in the `.tool-versions` file?&quot;">​</a></h2><p>asdf must always have an exact version of every tool in the current directory, not version ranges or special values like <code>latest</code> are not permitted. This ensure that asdf behaves in a deterministic and consistent way across time and across different machines. A special version like <code>latest</code> would change over time, and could vary between machines if <code>asdf install</code> was run at different times. As such it&#39;s allowed in asdf commands like <code>asdf set &lt;tool&gt; latest</code>, but forbidden in the <code>.tool-versions</code> file.</p><p>Think of <code>.tool-versions</code> file as <code>Gemfile.lock</code> or <code>package-lock.json</code>. It is a file that contains the exact version of every tool your project depends on.</p><p>Note that the <code>system</code> version is allowed in <code>.tool-versions</code> files, and it could resolve to different versions when used. It is a special value that effectively disables asdf for a particular tool in the given directory.</p><p>See issue <a href="https://github.com/asdf-vm/asdf/issues/1012" target="_blank" rel="noreferrer">https://github.com/asdf-vm/asdf/issues/1012</a></p><h2 id="why-can-t-version-ranges-be-used-in-the-tool-versions-files" tabindex="-1">Why can&#39;t version ranges be used in the <code>.tool-versions</code> files? <a class="header-anchor" href="#why-can-t-version-ranges-be-used-in-the-tool-versions-files" aria-label="Permalink to &quot;Why can&#39;t version ranges be used in the `.tool-versions` files?&quot;">​</a></h2><p>Similar to the question above on the use of <code>latest</code>. With a version range specified, asdf would be free to choose any installed version in the specified range. This could result in different behavior across machines if they have different versions installed. The intent is for asdf to be fully deterministic so the same <code>.tool-versions</code> file produces the exact same environment across time and across different computers.</p><p>See issue <a href="https://github.com/asdf-vm/asdf-nodejs/issues/235#issuecomment-885809776" target="_blank" rel="noreferrer">https://github.com/asdf-vm/asdf-nodejs/issues/235#issuecomment-885809776</a></p><h2 id="why-is-a-command-completely-unrelated-to-the-plugins-i-m-using-is-getting-shimmed-by-asdf" tabindex="-1">Why is a command completely unrelated to the plugins I&#39;m using is getting shimmed by asdf? <a class="header-anchor" href="#why-is-a-command-completely-unrelated-to-the-plugins-i-m-using-is-getting-shimmed-by-asdf" aria-label="Permalink to &quot;Why is a command completely unrelated to the plugins I&#39;m using is getting shimmed by asdf?&quot;">​</a></h2><p><strong>asdf is only going to generate shims for executables it manages</strong>. If for example you use the Ruby plugin then you&#39;ll expect to see commands like <code>ruby</code> and <code>irb</code> replaced with shims, along with other executables present in Ruby packages you installed.</p><p>If you see a shim that you don&#39;t expect, it&#39;s likely because you installed a package under a tool that was managed by asdf, and the package provided the executable.</p><p>This is surprising when the executable has the same name as an executable already on your system. <a href="https://github.com/asdf-vm/asdf/issues/584" target="_blank" rel="noreferrer">Some users reported</a> a Node.JS package that provided it&#39;s own version of the <code>which</code> command. This resulted in asdf creating a shim for it, and it replacing the version of the <code>which</code> command present on the operating system. In such instances it&#39;s best to locate the package introducing the executable and remove it. <code>asdf which &lt;command&gt;</code> is helping in showing you where the offending executable is located, making it possible to determine what package added it.</p><p>See issues <a href="https://github.com/asdf-vm/asdf/issues/584" target="_blank" rel="noreferrer">https://github.com/asdf-vm/asdf/issues/584</a> <a href="https://github.com/asdf-vm/asdf/issues/1653" target="_blank" rel="noreferrer">https://github.com/asdf-vm/asdf/issues/1653</a></p>',26)]))}const m=t(i,[["render",n]]);export{f as __pageData,m as default};
