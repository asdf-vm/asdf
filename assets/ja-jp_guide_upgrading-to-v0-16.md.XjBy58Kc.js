import{_ as s,c as e,o as d,ag as i}from"./chunks/framework.CkHWihve.js";const u=JSON.parse('{"title":"0.16.0にアップグレードする","description":"","frontmatter":{},"headers":[],"relativePath":"ja-jp/guide/upgrading-to-v0-16.md","filePath":"ja-jp/guide/upgrading-to-v0-16.md","lastUpdated":1739818858000}'),o={name:"ja-jp/guide/upgrading-to-v0-16.md"};function n(l,a,c,t,p,h){return d(),e("div",null,a[0]||(a[0]=[i('<h1 id="_0-16-0にアップグレードする" tabindex="-1">0.16.0にアップグレードする <a class="header-anchor" href="#_0-16-0にアップグレードする" aria-label="Permalink to &quot;0.16.0にアップグレードする&quot;">​</a></h1><p>asdfはバージョン0.15.0以前まではBashで書かれており、<code>asdf</code>関数がシェルにロードされたBashスクリプトのセットとして配布されていました。バージョン0.16.0はasdfをGoで完全に書き直したものです。完全に書き直したことによって多くの<a href="#breaking-changes">破壊的変更</a>があり、現在ではスクリプトのセットではなくバイナリになっています。</p><h2 id="インストール" tabindex="-1">インストール <a class="header-anchor" href="#インストール" aria-label="Permalink to &quot;インストール&quot;">​</a></h2><p>バージョン0.16.0のインストールは、以前のバージョンのasdfよりもはるかに簡単です。 たったの3ステップで完了します:</p><ul><li>お使いのオペレーティングシステム/アーキテクチャの組み合わせに適した<code>asdf</code>バイナリをダウンロードし、<code>$PATH</code>のディレクトリに配置する。</li><li><code>$PATH</code>の前に<code>$ASDF_DATA_DIR/shims</code>を追加する。</li><li>以前にasdfのデータの保存場所をカスタマイズしていた場合は、<code>ASDF_DATA_DIR</code>に旧バージョンのプラグイン、バージョン、Shimをインストールしていたディレクトリを設定する(オプション)。</li></ul><p>オペレーティングシステムのパッケージマネージャがすでにasdf 0.16.0を提供している場合は、それをインストールするのがおそらく最良の方法です。asdfのアップグレードはOSのパッケージマネージャーと手動インストールでのみ可能です。セルフアップグレード機能はありません。</p><h3 id="データを失わずにアップグレードする" tabindex="-1">データを失わずにアップグレードする <a class="header-anchor" href="#データを失わずにアップグレードする" aria-label="Permalink to &quot;データを失わずにアップグレードする&quot;">​</a></h3><p>既存のインストールデータを失うことなく、asdfの最新バージョンにアップグレードできます。上記の手順と同じです。</p><h4 id="_1-お使いのオペレーティングシステムとアーキテクチャに適したasdfバイナリをダウンロードする" tabindex="-1">1. お使いのオペレーティングシステムとアーキテクチャに適した<code>asdf</code>バイナリをダウンロードする <a class="header-anchor" href="#_1-お使いのオペレーティングシステムとアーキテクチャに適したasdfバイナリをダウンロードする" aria-label="Permalink to &quot;1. お使いのオペレーティングシステムとアーキテクチャに適した`asdf`バイナリをダウンロードする&quot;">​</a></h4><p>バイナリをダウンロードして、パスの通ったディレクトリに配置します。以下ではasdfのバイナリを<code>$HOME/bin</code>に配置し、<code>$HOME/bin</code>を<code>$PATH</code>の先頭に追加します:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># In .zshrc, .bashrc, etc...</span></span>\n<span class="line"><span>export PATH=&quot;$HOME/bin:$PATH&quot;</span></span></code></pre></div><h4 id="_2-asdf-data-dir-を設定する" tabindex="-1">2. <code>ASDF_DATA_DIR</code> を設定する <a class="header-anchor" href="#_2-asdf-data-dir-を設定する" aria-label="Permalink to &quot;2. `ASDF_DATA_DIR` を設定する&quot;">​</a></h4><p><code>asdf info</code>を実行し、変数<code>ASDF_DATA_DIR</code>を含む行をコピーします:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>...</span></span>\n<span class="line"><span>ASDF_DATA_DIR=&quot;/home/myuser/.asdf&quot;</span></span>\n<span class="line"><span>...</span></span></code></pre></div><p>シェルのRCファイル（Zshの場合は<code>.zshrc</code>、Bashの場合は<code>.bashrc</code>など）で、<code>ASDF_DATA_DIR</code>を設定してエクスポートします:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASDF_DATA_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/myuser/.asdf&quot;</span></span></code></pre></div><h4 id="_3-asdf-data-dir-shimsを-pathの前に追加する。" tabindex="-1">3. <code>$ASDF_DATA_DIR/shims</code>を<code>$PATH</code>の前に追加する。 <a class="header-anchor" href="#_3-asdf-data-dir-shimsを-pathの前に追加する。" aria-label="Permalink to &quot;3. `$ASDF_DATA_DIR/shims`を`$PATH`の前に追加する。&quot;">​</a></h4><p>シェルのRCファイル（手順2と同じファイル）で、パスの前に<code>$ASDF_DATA_DIR/shims</code>を追加します：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ASDF_DATA_DIR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/home/myuser/.asdf&quot;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ASDF_DATA_DIR</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/shims:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$PATH</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span></code></pre></div><h4 id="_4-shimを再生成する" tabindex="-1">4. Shimを再生成する <a class="header-anchor" href="#_4-shimを再生成する" aria-label="Permalink to &quot;4. Shimを再生成する&quot;">​</a></h4><p><code>asdf --help</code>を実行して、シェルセッションの<code>asdf</code>コマンドのバージョンが0.16.0以上であることを確認してください。まだ古いバージョンが表示されている場合は、新しいシェルセッションを開始する必要があります。</p><p><code>asdf</code>コマンドが新しいバージョンであることを確認したら、<code>asdf reshim</code>を実行してすべてのShimを再生成します。この手順は、古いShimが古いバージョンのBashを参照している可能性があるため必要となります。</p><h3 id="テスト" tabindex="-1">テスト <a class="header-anchor" href="#テスト" aria-label="Permalink to &quot;テスト&quot;">​</a></h3><p>0.16.0へのアップグレードで問題が発生するかどうか確信が持てない場合は、「データを失わずにアップグレードする」で説明したように、既存のバージョンに加えて0.16.0をインストールしてテストすることができます。0.16.0へのアップグレードで不具合が生じることがわかったら、シェルのRCファイルに追加した行を削除してください。</p><h2 id="破壊的変更" tabindex="-1">破壊的変更 <a class="header-anchor" href="#破壊的変更" aria-label="Permalink to &quot;破壊的変更&quot;">​</a></h2><h3 id="ハイフン付きバージョンのコマンドは削除されました" tabindex="-1">ハイフン付きバージョンのコマンドは削除されました <a class="header-anchor" href="#ハイフン付きバージョンのコマンドは削除されました" aria-label="Permalink to &quot;ハイフン付きバージョンのコマンドは削除されました&quot;">​</a></h3><p>asdfバージョン0.15.0およびそれ以前では、特定のコマンドのハイフン付きバージョンとハイフンなしバージョンがサポートされていました。バージョン 0.16.0 では、ハイフンなしバージョンのみがサポートされます。影響を受けるコマンドは以下です:</p><ul><li><code>asdf list-all</code> -&gt; <code>asdf list all</code></li><li><code>asdf plugin-add</code> -&gt; <code>asdf plugin add</code></li><li><code>asdf plugin-list</code> -&gt; <code>asdf plugin list</code></li><li><code>asdf plugin-list-all</code> -&gt; <code>asdf plugin list all</code></li><li><code>asdf plugin-update</code> -&gt; <code>asdf plugin update</code></li><li><code>asdf plugin-remove</code> -&gt; <code>asdf plugin remove</code></li><li><code>asdf plugin-test</code> -&gt; <code>asdf plugin test</code></li><li><code>asdf shim-versions</code> -&gt; <code>asdf shimversions</code></li></ul><h3 id="asdf-global-と-asdf-local-コマンドが-asdf-set-に変更されました" tabindex="-1"><code>asdf global</code> と <code>asdf local</code> コマンドが <code>asdf set</code> に変更されました <a class="header-anchor" href="#asdf-global-と-asdf-local-コマンドが-asdf-set-に変更されました" aria-label="Permalink to &quot;`asdf global` と `asdf local` コマンドが `asdf set` に変更されました&quot;">​</a></h3><p><code>asdf global</code> と <code>asdf local</code> は削除されました。「グローバル」と「ローカル」という用語は誤りで、誤解を招く恐れがありました。asdf は、実際にはあらゆる場所に適用される「グローバル」バージョンをサポートしていません。<code>asdf global</code>で指定したバージョンは、カレントディレクトリにある <code>.tool-versions</code> ファイルで簡単に上書きすることができました。これはユーザーを混乱させていました。 新しい<code>asdf set</code>はデフォルトでは<code>asdf local</code>と同じように動作しますが、ユーザーのホームディレクトリ (<code>--home</code>) や親ディレクトリ (<code>--parent</code>) にある既存の <code>.tool-versions</code> ファイルにバージョンを設定するためのフラグも用意されています。 この新しいインターフェイスは、asdfがどのようにバージョンを解決するかをよりよく理解し、同等の機能を提供することを期待しています。</p><h3 id="asdf-updateコマンドが削除されました" tabindex="-1"><code>asdf update</code>コマンドが削除されました <a class="header-anchor" href="#asdf-updateコマンドが削除されました" aria-label="Permalink to &quot;`asdf update`コマンドが削除されました&quot;">​</a></h3><p>この方法ではアップデートを実行できなくなりました。OS のパッケージマネージャを使用するか、手動で最新のバイナリをダウンロードしてください。さらに、バージョン 0.15.0 以前の<code>asdf update</code>コマンドは、インストールプロセスが変更されたため、バージョン 0.16.0 にアップグレードできません。 <strong><code>asdf update</code>を使用して最新のGo実装にアップグレードすることはできません。</strong></p><h3 id="asdf-shellコマンドが削除されました" tabindex="-1"><code>asdf shell</code>コマンドが削除されました <a class="header-anchor" href="#asdf-shellコマンドが削除されました" aria-label="Permalink to &quot;`asdf shell`コマンドが削除されました&quot;">​</a></h3><p>このコマンドは実際にユーザーの現在のシェルセッションに環境変数を設定していました。これは<code>asdf</code>が実行可能ファイルではなく、実際にはシェル関数であったために可能でした。新しい実装では、asdfからすべてのシェルコードが削除され、シェル関数ではなくバイナリになったので、シェルで直接環境変数を設定することはできなくなりました。</p><h3 id="asdf-currentが変更されました" tabindex="-1"><code>asdf current</code>が変更されました <a class="header-anchor" href="#asdf-currentが変更されました" aria-label="Permalink to &quot;`asdf current`が変更されました&quot;">​</a></h3><p>これまで出力されていた3つのカラムの代わりに、最後のカラムはバージョンが設定されている場所か、バージョンを設定またはインストールするために実行可能な推奨コマンドのいずれかが表示されるようになりました。3番目のカラムが2つのカラムに分割されています。3番目のカラムは、バージョンが設定されている場合（通常、バージョンファイルか環境変数のいずれか）のみ、バージョンのソースを示すようになり、4番目は、指定されたバージョンが実際にインストールされているかどうかを示すブール値です。インストールされていない場合は、インストールコマンドの候補が表示されます。</p><h3 id="プラグイン拡張コマンドの前にcmdを付ける必要があります" tabindex="-1">プラグイン拡張コマンドの前に<code>cmd</code>を付ける必要があります <a class="header-anchor" href="#プラグイン拡張コマンドの前にcmdを付ける必要があります" aria-label="Permalink to &quot;プラグイン拡張コマンドの前に`cmd`を付ける必要があります&quot;">​</a></h3><p>以前のプラグイン拡張コマンドは次のように実行できました:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>asdf nodejs nodebuild --version</span></span></code></pre></div><p>現在では、組み込みコマンドと混同するのを避けるために、<code>cmd</code>をプレフィックスとして付ける必要があります:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>asdf cmd nodejs nodebuild --version</span></span></code></pre></div><h3 id="拡張コマンドが再設計されました" tabindex="-1">拡張コマンドが再設計されました <a class="header-anchor" href="#拡張コマンドが再設計されました" aria-label="Permalink to &quot;拡張コマンドが再設計されました&quot;">​</a></h3><p>プラグイン拡張コマンドにはいくつかの変更点があります：</p><ul><li>拡張コマンドは<code>exec</code>システムコールで実行可能でなければなりません。拡張コマンドがシェルスクリプトの場合、<code>exec</code>で実行するためには適切なshebang行で始まる必要があります。</li><li>拡張コマンドはバイナリでもスクリプトでも、どの言語でも実行できるようになりました。もはや<code>.bash</code>という拡張子を要求するのは誤解を招くので意味がありません。</li><li>実行権限が設定されていなければなりません。</li><li>実行権限がない場合、asdfによってBashスクリプトとしてソースされなくなりました。</li></ul><p>さらに、プラグイン名の後の最初の引数のみが、実行する拡張コマンドを決定するために使用されます。これは、プラグイン名の後の最初の引数にマッチするコマンドが見つからない場合にasdfがデフォルトで実行する<code>command</code>拡張コマンドが存在することを意味します。たとえばこのようになります:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>foo/</span></span>\n<span class="line"><span>  lib/commands/</span></span>\n<span class="line"><span>    command</span></span>\n<span class="line"><span>    command-bar</span></span>\n<span class="line"><span>    command-bat-man</span></span></code></pre></div><p>以前は、これらのスクリプトはこのように動作していました:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ asdf cmd foo         # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command`</span></span>\n<span class="line"><span>$ asdf cmd foo bar     # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bar`</span></span>\n<span class="line"><span>$ asdf cmd foo bat man # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat-man`</span></span></code></pre></div><p>現在はこのようになります:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ asdf cmd foo         # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command`</span></span>\n<span class="line"><span>$ asdf cmd foo bar     # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bar`</span></span>\n<span class="line"><span>$ asdf cmd foo bat man # same as running `$ASDF_DATA_DIR/plugins/foo/lib/commands/command-bat man`</span></span></code></pre></div><h3 id="実行可能なshimはsyscall-execによって実行できる必要があります" tabindex="-1">実行可能なShimは<code>syscall.Exec</code>によって実行できる必要があります <a class="header-anchor" href="#実行可能なshimはsyscall-execによって実行できる必要があります" aria-label="Permalink to &quot;実行可能なShimは`syscall.Exec`によって実行できる必要があります&quot;">​</a></h3><p>asdf 0.15.0以前はBashで実装されていたので、Bashで実行できる実行ファイルであれば実行することができました。つまり、shebang行がないスクリプトでも<code>asdf exec</code>で実行することができました。しかし、asdf 0.16.xがGoで実装されたことで、Goの<code>syscall.Exec</code>関数を使って実行ファイルを呼び出すようになり、shebangがないスクリプトは扱えなくなりました。</p><p>実際には、これはあまり問題ではありません。ほとんどのシェルスクリプトはshebang行を含んでいます。asdfによって管理されるツールがshebang行を持たないスクリプトを提供する場合、shebang行を追加する必要があります。</p><h3 id="カスタムshimテンプレートはサポートされなくなりました" tabindex="-1">カスタムShimテンプレートはサポートされなくなりました <a class="header-anchor" href="#カスタムshimテンプレートはサポートされなくなりました" aria-label="Permalink to &quot;カスタムShimテンプレートはサポートされなくなりました&quot;">​</a></h3><p>これはめったに使われない機能でした。コアチームがメンテナンスしているプラグインでこの機能を使用していたのはElixirプラグインだけで、もう必要ありません。この機能はもともと、実行されるのではなくプログラムによって評価されるShimが、特定のプログラム(Elixir の場合は<code>iex</code>シェル)による評価に適したコードを含むように追加されました。さらに調べてみると、この機能は実行可能ファイルの<code>PATH</code>が不適切に設定され、選択されたバージョンの<strong>実行可能ファイル</strong>ではなく、<strong>Shim</strong>を含むように設定されていたために存在していたようです。</p>',55)]))}const m=s(o,[["render",n]]);export{u as __pageData,m as default};
